'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getOwnPropertyDescriptor = require('babel-runtime/core-js/reflect/get-own-property-descriptor');

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

var _defineProperties = require('babel-runtime/core-js/object/define-properties');

var _defineProperties2 = _interopRequireDefault(_defineProperties);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _isotropicMake = require('isotropic-make');

var _isotropicMake2 = _interopRequireDefault(_isotropicMake);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _Error = (0, _isotropicMake2.default)(Error, {
    toString: function toString() {
        var string = this.name || 'Error';

        if (this.message) {
            string += ': ' + this.message;
        }

        return string;
    },
    _getMessage: function _getMessage() {
        return this._message || this.error && this.error.message || void null;
    },
    _getName: function _getName() {
        return this._name || this.error && this.error.name || void null;
    },
    _getStack: function _getStack() {
        if (!this._stack) {
            this._stack = this.toString();

            if (this.details) {
                this._stack += '\nDetails: ' + (0, _stringify2.default)(this.details, null, 4);
            }

            var prepareStackTrace = Error.prepareStackTrace;

            Error.prepareStackTrace = _Error._prepareStackTrace;
            this._stack += '\n' + this._nativeGetStack();
            Error.prepareStackTrace = prepareStackTrace;

            if (this.error) {
                this._stack += '\n-> ' + (this.error.stack || this.error);
            }
        }

        return this._stack;
    },
    _init: function _init() {
        var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        var details = _ref.details;
        var error = _ref.error;
        var message = _ref.message;
        var name = _ref.name;

        var nativeError = void 0;

        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, _Error);
        } else {
            try {
                throw new Error();
            } catch (error) {
                nativeError = error;
            }
        }

        (0, _defineProperties2.default)(this, {
            details: {
                enumerable: true,
                value: details
            },
            error: {
                enumerable: true,
                value: error
            },
            message: {
                enumerable: true,
                get: this._getMessage
            },
            name: {
                enumerable: true,
                get: this._getName
            },
            stack: {
                get: this._getStack
            },
            _message: {
                value: message
            },
            _name: {
                value: name
            },
            _nativeGetStack: {
                value: nativeError ? function () {
                    return nativeError.stack;
                } : (0, _getOwnPropertyDescriptor2.default)(this, 'stack').get
            },
            _stack: {
                writable: true
            }
        });

        return this;
    }
}, {
    _prepareStackTrace: function _prepareStackTrace(errorObject, structuredStackTrace) {
        return structuredStackTrace.map(function (stackFrame) {
            var line = void 0;

            try {
                line = stackFrame.toString();
            } catch (error0) {
                try {
                    line = '<error: ' + error0 + '>';
                } catch (error1) {
                    line = '<error>';
                }
            }

            return '    at ' + line;
        }).join('\n');
    }
});

exports.default = _Error;
//# sourceMappingURL=data:application/json;base64,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RUEyRlo7QUFDQyxzQkFERCw4QkFDcUIsV0FEckIsRUFDa0Msb0JBRGxDLEVBQ3dEO0FBQ25ELGVBQU8scUJBQXFCLEdBQXJCLENBQXlCLHNCQUFjO0FBQzFDLGdCQUFJLGFBQUo7O0FBRUEsZ0JBQUk7QUFDQSx1QkFBTyxXQUFXLFFBQVgsRUFBUDtBQUNILGFBRkQsQ0FFRSxPQUFPLE1BQVAsRUFBZTtBQUNiLG9CQUFJO0FBQ0Esd0NBQWtCLE1BQWxCO0FBQ0gsaUJBRkQsQ0FFRSxPQUFPLE1BQVAsRUFBZTtBQUNiLDJCQUFPLFNBQVA7QUFDSDtBQUNKOztBQUVELCtCQUFpQixJQUFqQjtBQUNILFNBZE0sRUFjSixJQWRJLENBY0MsSUFkRCxDQUFQO0FBZUg7QUFqQkYsQ0EzRlksQ0FBZjs7a0JBK0dlLE0iLCJmaWxlIjoiZXJyb3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX21ha2UgZnJvbSAnaXNvdHJvcGljLW1ha2UnO1xuXG5jb25zdCBfRXJyb3IgPSBfbWFrZShFcnJvciwge1xuICAgIHRvU3RyaW5nICgpIHtcbiAgICAgICAgbGV0IHN0cmluZyA9IHRoaXMubmFtZSB8fCAnRXJyb3InO1xuXG4gICAgICAgIGlmICh0aGlzLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHN0cmluZyArPSBgOiAke3RoaXMubWVzc2FnZX1gO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICB9LFxuICAgIF9nZXRNZXNzYWdlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21lc3NhZ2UgfHwgdGhpcy5lcnJvciAmJiB0aGlzLmVycm9yLm1lc3NhZ2UgfHwgdm9pZCBudWxsO1xuICAgIH0sXG4gICAgX2dldE5hbWUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbmFtZSB8fCB0aGlzLmVycm9yICYmIHRoaXMuZXJyb3IubmFtZSB8fCB2b2lkIG51bGw7XG4gICAgfSxcbiAgICBfZ2V0U3RhY2sgKCkge1xuICAgICAgICBpZiAoIXRoaXMuX3N0YWNrKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGFjayA9IHRoaXMudG9TdHJpbmcoKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuZGV0YWlscykge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YWNrICs9IGBcXG5EZXRhaWxzOiAke0pTT04uc3RyaW5naWZ5KHRoaXMuZGV0YWlscywgbnVsbCwgNCl9YDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcHJlcGFyZVN0YWNrVHJhY2UgPSBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZTtcblxuICAgICAgICAgICAgRXJyb3IucHJlcGFyZVN0YWNrVHJhY2UgPSBfRXJyb3IuX3ByZXBhcmVTdGFja1RyYWNlO1xuICAgICAgICAgICAgdGhpcy5fc3RhY2sgKz0gYFxcbiR7dGhpcy5fbmF0aXZlR2V0U3RhY2soKX1gO1xuICAgICAgICAgICAgRXJyb3IucHJlcGFyZVN0YWNrVHJhY2UgPSBwcmVwYXJlU3RhY2tUcmFjZTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGFjayArPSBgXFxuLT4gJHt0aGlzLmVycm9yLnN0YWNrIHx8IHRoaXMuZXJyb3J9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9zdGFjaztcbiAgICB9LFxuICAgIF9pbml0ICh7XG4gICAgICAgIGRldGFpbHMsXG4gICAgICAgIGVycm9yLFxuICAgICAgICBtZXNzYWdlLFxuICAgICAgICBuYW1lXG4gICAgfSA9IHt9KSB7XG4gICAgICAgIGxldCBuYXRpdmVFcnJvcjtcblxuICAgICAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAgICAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIF9FcnJvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBuYXRpdmVFcnJvciA9IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgICAgICAgZGV0YWlsczoge1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGRldGFpbHNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjoge1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGVycm9yXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWVzc2FnZToge1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZ2V0OiB0aGlzLl9nZXRNZXNzYWdlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZ2V0OiB0aGlzLl9nZXROYW1lXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhY2s6IHtcbiAgICAgICAgICAgICAgICBnZXQ6IHRoaXMuX2dldFN0YWNrXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX21lc3NhZ2U6IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogbWVzc2FnZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9uYW1lOiB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IG5hbWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfbmF0aXZlR2V0U3RhY2s6IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogbmF0aXZlRXJyb3IgPyAoKSA9PiBuYXRpdmVFcnJvci5zdGFjayA6IFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRoaXMsICdzdGFjaycpLmdldFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9zdGFjazoge1xuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn0sIHtcbiAgICBfcHJlcGFyZVN0YWNrVHJhY2UgKGVycm9yT2JqZWN0LCBzdHJ1Y3R1cmVkU3RhY2tUcmFjZSkge1xuICAgICAgICByZXR1cm4gc3RydWN0dXJlZFN0YWNrVHJhY2UubWFwKHN0YWNrRnJhbWUgPT4ge1xuICAgICAgICAgICAgbGV0IGxpbmU7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbGluZSA9IHN0YWNrRnJhbWUudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yMCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmUgPSBgPGVycm9yOiAke2Vycm9yMH0+YDtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcjEpIHtcbiAgICAgICAgICAgICAgICAgICAgbGluZSA9ICc8ZXJyb3I+JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBgICAgIGF0ICR7bGluZX1gO1xuICAgICAgICB9KS5qb2luKCdcXG4nKTtcbiAgICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgX0Vycm9yO1xuIl19