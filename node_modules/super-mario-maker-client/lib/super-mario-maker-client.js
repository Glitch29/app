'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = exports.logIn = exports.fetchCourse = undefined;

var _apply = require('babel-runtime/core-js/reflect/apply');

var _apply2 = _interopRequireDefault(_apply);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _isNan = require('babel-runtime/core-js/number/is-nan');

var _isNan2 = _interopRequireDefault(_isNan);

var _setImmediate2 = require('babel-runtime/core-js/set-immediate');

var _setImmediate3 = _interopRequireDefault(_setImmediate2);

var _isotropicError = require('isotropic-error');

var _isotropicError2 = _interopRequireDefault(_isotropicError);

var _htmlparser = require('htmlparser2');

var _isotropicMake = require('isotropic-make');

var _isotropicMake2 = _interopRequireDefault(_isotropicMake);

var _url = require('url');

var _https = require('https');

var _querystring = require('querystring');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
@class SuperMarioMakerClient
@arg {Object} [config]
@arg {String} [config.csrfTokenHeaderName='X-CSRF-Token']
@arg {Object} [config.gameStyles={sb: 'superMarioBros',sb3: 'superMarioBros3',sbu: 'newSuperMarioBrosU',sw: 'superMarioWorld'}]
@arg {String} [config.lang='en-US']
@arg {String} [config.sessionCookieName='_supermariomakerbookmark_session']
@arg {String} [config.superMarioMakerAuthUrl='https://supermariomakerbookmark.nintendo.net/users/auth/nintendo']
@arg {String} [config.superMarioMakerBookmarkUrl='https://supermariomakerbookmark.nintendo.net']
*/
/**
@module super-mario-maker-client
@author Steven Olmsted <steven.olm@gmail.com>
*/

/**
@callback CourseCallback
@arg {Error} error
@arg {Object} course
*/

/**
@callback ErrorCallback
@arg {Error} error
*/

/**
@callback IncomingMessageCallback
@arg {Error} error
@arg {IncomingMessage} response
*/

/**
@callback SuperMarioMakerClientCallback
@arg {Error} error
@arg {SuperMarioMakerClient} superMarioMakerClient
*/

const _SuperMarioMakerClient = (0, _isotropicMake2.default)({
    /**
    @method module:super-mario-maker-client~SuperMarioMakerClient#bookmarkCourse
    @arg {Object} config
    @arg {String} config.courseId
    @arg {String} config.csrfToken
    @arg {ErrorCallback} callbackFunction
    @instance
    @returns {this}
    */

    bookmarkCourse: function bookmarkCourse(_ref, callbackFunction) {
        let courseId = _ref.courseId;
        let csrfToken = _ref.csrfToken;

        if (!this._isLoggedIn) {
            (0, _setImmediate3.default)(callbackFunction, (0, _isotropicError2.default)({
                message: 'Not logged in.'
            }));
            return this;
        }

        return this._request({
            options: {
                headers: {
                    [this._csrfTokenHeaderName]: csrfToken
                },
                method: 'POST'
            },
            url: this._getCourseBookmarkUrl(courseId)
        }, (error, response) => {
            if (error) {
                callbackFunction((0, _isotropicError2.default)({
                    error: error
                }));
            } else if (response.statusCode === 200) {
                callbackFunction();
            } else {
                callbackFunction((0, _isotropicError2.default)({
                    details: {
                        response: response
                    },
                    message: 'Failed to bookmark course.'
                }));
            }
        });
    },

    /**
    @method module:super-mario-maker-client~SuperMarioMakerClient#fetchCourse
    @arg {String} courseId
    @arg {CourseCallback} callbackFunction
    @returns {this}
    */
    fetchCourse: function fetchCourse(courseId, callbackFunction) {
        return this._request({
            url: this._getCourseUrl(courseId)
        }, (error, response) => {
            if (error) {
                callbackFunction((0, _isotropicError2.default)({
                    error: error
                }));
                return;
            }

            if (response.statusCode !== 200) {
                callbackFunction((0, _isotropicError2.default)({
                    details: {
                        response: response
                    },
                    message: 'Course request failed.'
                }));
                return;
            }

            let complete,
                currentNode = {
                attributes: {},
                children: [],
                name: 'root',
                text: []
            };

            const completeFunction = (error, course) => {
                if (complete) {
                    return;
                }

                complete = true;

                if (error) {
                    callbackFunction((0, _isotropicError2.default)({
                        error: error,
                        message: 'HTML parse error.'
                    }));
                } else {
                    callbackFunction(null, course);
                }
            },
                  course = {
                courseId: courseId
            },
                  gameStyles = this._gameStyles;

            response.pipe(new _htmlparser.Parser({
                onclosetag: function onclosetag(name) {
                    if (currentNode.name !== name) {
                        completeFunction((0, _isotropicError2.default)({
                            details: {
                                name: name
                            },
                            message: 'Closing tag had no matching open tag.'
                        }));

                        response.unpipe();
                        return;
                    }

                    const className = currentNode.attributes.class,
                          closedNode = currentNode;

                    currentNode = currentNode.parent;

                    if (!className) {
                        return;
                    }

                    if (/(?:^| )clear-rate(?: |$)/.test(className)) {
                        let digits = '';

                        closedNode.children.forEach(childNode => {
                            const className = childNode.attributes.class,
                                  match = className && className.match(/(?:^| )typography-(\d|second)(?: |$)/);

                            if (!match) {
                                return;
                            }

                            if (match[1] === 'second') {
                                digits += '.';
                            } else {
                                digits += match[1];
                            }
                        });

                        if (digits) {
                            course.clearRate = +digits;
                        }
                    } else if (/(?:^| )clear-time(?: |$)/.test(className)) {
                        let digits = '',
                            minutes,
                            seconds;

                        closedNode.children.forEach(childNode => {
                            const className = childNode.attributes.class,
                                  match = className && className.match(/(?:^| )typography-(\d|minute|second)(?: |$)/);

                            if (!match) {
                                return;
                            }

                            if (match[1] === 'minute') {
                                if (digits) {
                                    minutes = +digits;
                                    digits = '';
                                }
                            } else if (match[1] === 'second') {
                                if (digits) {
                                    seconds = +digits;
                                    digits = '';
                                }
                            } else {
                                digits += match[1];
                            }
                        });

                        if (digits || minutes || seconds) {
                            let distance = 0,
                                node = closedNode.parent,
                                worldRecord;

                            const time = (minutes || 0) * 60000 + (seconds || 0) * 1000 + (+digits || 0);

                            while (node && distance < 3) {
                                const className = node.attributes.class;

                                if (className && /(?:^| )fastest-user(?: |$)/.test(className)) {
                                    worldRecord = true;
                                }

                                node = node.parent;
                                distance += 1;
                            }

                            if (worldRecord) {
                                worldRecord = course.worldRecord;

                                if (!worldRecord) {
                                    worldRecord = {};
                                    course.worldRecord = worldRecord;
                                }

                                worldRecord.time = time;
                            } else {
                                course.yourBestTime = time;
                            }
                        }
                    } else if (/(?:^| )course-detail-wrapper(?: |$)/.test(className)) {
                        closedNode.children.forEach(childNode => {
                            const className = childNode.attributes.class;

                            if (!className) {
                                return;
                            }

                            if (/(?:^| )creator(?: |$)/.test(className)) {
                                const findImgSrc = childNode => {
                                    if (childNode.name === 'img' && childNode.attributes.src) {
                                        return childNode.attributes.src;
                                    }

                                    let imgSrc;

                                    childNode.children.some(childNode => {
                                        imgSrc = findImgSrc(childNode);
                                        return imgSrc;
                                    });

                                    return imgSrc;
                                },
                                      imgSrc = findImgSrc(childNode);

                                if (!imgSrc) {
                                    return;
                                }

                                let creator = course.creator;

                                if (!creator) {
                                    creator = {};
                                    course.creator = creator;
                                }

                                creator.miiIconUrl = imgSrc;
                            } else if (/(?:^| )creator-info(?: |$)/.test(className)) {
                                let creator = course.creator;

                                if (!creator) {
                                    creator = {};
                                    course.creator = creator;
                                }

                                childNode.children.forEach(childNode => {
                                    const className = childNode.attributes.class;

                                    if (!className) {
                                        return;
                                    }

                                    if (/(?:^| )flag(?: |$)/.test(className)) {
                                        const country = className.split(' ').filter(className => className !== 'flag')[0];

                                        if (country) {
                                            creator.country = country;
                                        }
                                    } else if (/(?:^| )medals(?: |$)/.test(className)) {
                                        let match = className.match(/(?:^| )common_icon_coin(\d+)(?: |$)/);

                                        match = match && match[1];

                                        if (match) {
                                            if (match === '11') {
                                                let digits = '';

                                                childNode.children.forEach(childNode => {
                                                    const className = childNode.attributes.class,
                                                          match = className && className.match(/(?:^| )typography-(\d)(?: |$)/);

                                                    if (match) {
                                                        digits += match[1];
                                                    }
                                                });

                                                if (digits) {
                                                    creator.medals = +digits;
                                                }
                                            } else {
                                                creator.medals = +match;
                                            }
                                        }
                                    } else if (/(?:^| )name(?: |$)/.test(className)) {
                                        const text = childNode.text[0];

                                        if (text) {
                                            creator.miiName = text;
                                        }
                                    }
                                });
                            }
                        });
                    } else if (/(?:^| )course-header(?: |$)/.test(className) && closedNode.text.length) {
                        const difficulty = closedNode.text.join('');

                        course.difficulty = difficulty.charAt(0).toLowerCase() + difficulty.substr(1).replace(/ /g, '');
                    } else if (/(?:^| )course-tag(?: |$)/.test(className) && closedNode.text.length) {
                        const tag = closedNode.text.join('');

                        if (tag && tag !== '---') {
                            course.tag = tag;
                        }
                    } else if (/(?:^| )course-title(?: |$)/.test(className) && closedNode.text.length) {
                        course.title = closedNode.text.join('');
                    } else if (/(?:^| )created_at(?: |$)/.test(className) && closedNode.text.length) {
                        const createdAt = closedNode.text.join(''),
                              match = createdAt.match(/^(\d+) (day|hour)s? ago$/);

                        course.createdAt = createdAt;

                        if (match) {
                            let millisecondsAgo;

                            switch (match[2]) {
                                case 'day':
                                    millisecondsAgo = 86400000;
                                    break;
                                case 'hour':
                                    millisecondsAgo = 3600000;
                                    break;
                                default:
                                    return;
                            }

                            course.uploadDate = new Date(new Date().getTime() - match[1] * millisecondsAgo);
                        } else {
                            const uploadDate = new Date(createdAt);

                            if (!(0, _isNan2.default)(uploadDate.getTime())) {
                                course.uploadDate = uploadDate;
                            }
                        }
                    } else if (/(?:^| )liked-count(?: |$)/.test(className)) {
                        let digits = '';

                        closedNode.children.forEach(childNode => {
                            const className = childNode.attributes.class,
                                  match = className && className.match(/(?:^| )typography-(\d)(?: |$)/);

                            if (match) {
                                digits += match[1];
                            }
                        });

                        if (digits) {
                            course.stars = +digits;
                        }
                    } else if (/(?:^| )played-count(?: |$)/.test(className)) {
                        let digits = '';

                        closedNode.children.forEach(childNode => {
                            const className = childNode.attributes.class,
                                  match = className && className.match(/(?:^| )typography-(\d)(?: |$)/);

                            if (match) {
                                digits += match[1];
                            }
                        });

                        if (digits) {
                            course.players = +digits;
                        }
                    } else if (/(?:^| )shared-count(?: |$)/.test(className)) {
                        let digits = '';

                        closedNode.children.forEach(childNode => {
                            const className = childNode.attributes.class,
                                  match = className && className.match(/(?:^| )typography-(\d)(?: |$)/);

                            if (match) {
                                digits += match[1];
                            }
                        });

                        if (digits) {
                            course.tweets = +digits;
                        }
                    } else if (/(?:^| )tried-count(?: |$)/.test(className)) {
                        let digits = '';

                        closedNode.children.forEach(childNode => {
                            const className = childNode.attributes.class,
                                  match = className && className.match(/(?:^| )typography-(\d|slash)(?: |$)/);

                            if (!match) {
                                return;
                            }

                            if (match[1] === 'slash') {
                                if (digits) {
                                    course.clears = +digits;
                                    digits = '';
                                }
                            } else {
                                digits += match[1];
                            }
                        });

                        if (digits) {
                            course.attempts = +digits;
                        }
                    } else if (/(?:^| )user-wrapper(?: |$)/.test(className)) {
                        const player = {};

                        closedNode.children.forEach(childNode => {
                            const className = childNode.attributes.class;

                            if (!className) {
                                return;
                            }

                            if (/(?:^| )mii-wrapper(?: |$)/.test(className)) {
                                const findImgSrc = childNode => {
                                    if (childNode.name === 'img' && childNode.attributes.src) {
                                        return childNode.attributes.src;
                                    }

                                    let imgSrc;

                                    childNode.children.some(childNode => {
                                        imgSrc = findImgSrc(childNode);
                                        return imgSrc;
                                    });

                                    return imgSrc;
                                },
                                      imgSrc = findImgSrc(childNode);

                                if (imgSrc) {
                                    player.miiIconUrl = imgSrc;
                                }
                            } else if (/(?:^| )user-info(?: |$)/.test(className)) {
                                childNode.children.forEach(childNode => {
                                    const className = childNode.attributes.class;

                                    if (!className) {
                                        return;
                                    }

                                    if (/(?:^| )flag(?: |$)/.test(className)) {
                                        const country = className.split(' ').filter(className => className !== 'flag')[0];

                                        if (country) {
                                            player.country = country;
                                        }
                                    } else if (/(?:^| )name(?: |$)/.test(className)) {
                                        const text = childNode.text[0];

                                        if (text) {
                                            player.miiName = text;
                                        }
                                    }
                                });
                            }
                        });

                        if (!(0, _keys2.default)(player).length) {
                            return;
                        }

                        let distance = 0,
                            node = closedNode.parent;

                        while (node && distance < 3) {
                            const className = node.attributes.class;

                            if (className) {
                                if (/(?:^| )cleared-body(?: |$)/.test(className)) {
                                    let clearedBy = course.clearedBy;

                                    if (!clearedBy) {
                                        clearedBy = [];
                                        course.clearedBy = clearedBy;
                                    }

                                    clearedBy.push(player);
                                    return;
                                }

                                if (/(?:^| )fastest-user(?: |$)/.test(className)) {
                                    let worldRecord = course.worldRecord;

                                    if (!worldRecord) {
                                        worldRecord = {};
                                        course.worldRecord = worldRecord;
                                    }

                                    worldRecord.player = player;
                                    return;
                                }

                                if (/(?:^| )first-user(?: |$)/.test(className)) {
                                    course.firstClearBy = player;
                                    return;
                                }

                                if (/(?:^| )liked-body(?: |$)/.test(className)) {
                                    let starredBy = course.starredBy;

                                    if (!starredBy) {
                                        starredBy = [];
                                        course.starredBy = starredBy;
                                    }

                                    starredBy.push(player);
                                    return;
                                }

                                if (/(?:^| )played-body(?: |$)/.test(className)) {
                                    let recentPlayers = course.recentPlayers;

                                    if (!recentPlayers) {
                                        recentPlayers = [];
                                        course.recentPlayers = recentPlayers;
                                    }

                                    recentPlayers.push(player);
                                    return;
                                }
                            }

                            node = node.parent;
                            distance += 1;
                        }
                    }
                },
                onend: function onend() {
                    completeFunction(null, course);
                },
                onerror: function onerror(error) {
                    completeFunction((0, _isotropicError2.default)({
                        error: error
                    }));
                },
                onopentag: function onopentag(name, attributes) {
                    const className = attributes.class,
                          node = {
                        attributes: attributes,
                        children: [],
                        name: name,
                        parent: currentNode,
                        text: []
                    };

                    currentNode.children.push(node);
                    currentNode = node;

                    if (attributes.name === 'csrf-token' && attributes.content) {
                        course.csrfToken = attributes.content;
                    }

                    if (!className) {
                        return;
                    }

                    if (/(?:^| )course-clear-flag-wrapper(?: |$)/.test(className)) {
                        course.cleared = true;
                    } else if (name === 'img' && attributes.src && /(?:^| )course-image(?: |$)/.test(className)) {
                        course.thumbnailUrl = attributes.src;
                    } else if (name === 'img' && attributes.src && /(?:^| )course-image-full(?: |$)/.test(className)) {
                        course.imageUrl = attributes.src;
                    } else if (/(?:^| )gameskin(?: |$)/.test(className)) {
                        let match = className.match(/(?:^| )common_gs_([A-Za-z0-9]+)(?: |$)/);

                        match = match && gameStyles[match[1]] || match;

                        if (match) {
                            course.gameStyle = match;
                        }
                    } else if (/(?:^| )miiverse(?: |$)/.test(className) && attributes.href) {
                        course.miiversePostUrl = attributes.href;
                    }
                },
                ontext: function ontext(text) {
                    currentNode.text.push(text);
                }
            }, {
                decodeEntities: true,
                lowerCaseTags: false,
                recognizeSelfClosing: true
            }));
        });
    },

    /**
    @member {Boolean} module:super-mario-maker-client~SuperMarioMakerClient#isLoggedIn
    @readonly
    */
    get isLoggedIn() {
        return this._isLoggedIn;
    },
    /**
    @method module:super-mario-maker-client~SuperMarioMakerClient#logIn
    @arg {Object} config
    @arg {String} config.password
    @arg {String} config.username
    @arg {ErrorCallback} callbackFunction
    @returns {this}
    */
    logIn: function logIn(_ref2, callbackFunction) {
        let password = _ref2.password;
        let username = _ref2.username;

        if (this._isLoggedIn && this._session) {
            (0, _setImmediate3.default)(callbackFunction);
            return this;
        }

        return this._request({
            updateSession: true,
            url: this._superMarioMakerAuthUrl
        }, (error, authResponse) => {
            if (error) {
                callbackFunction((0, _isotropicError2.default)({
                    error: error
                }));
                return;
            }

            if (authResponse.statusCode !== 302 || typeof authResponse.headers.location !== 'string') {
                callbackFunction((0, _isotropicError2.default)({
                    details: {
                        response: authResponse
                    },
                    message: 'Super Mario Maker auth request failed.'
                }));
                return;
            }

            const location = (0, _url.parse)(authResponse.headers.location, true),
                  query = location.query;

            if (!location.hostname || !location.pathname || !query || !query.client_id || !query.redirect_uri || !query.response_type || !query.state) {
                callbackFunction((0, _isotropicError2.default)({
                    details: {
                        response: authResponse
                    },
                    message: 'Super Mario Maker auth request failed.'
                }));
                return;
            }

            this._request({
                body: (0, _querystring.stringify)((0, _assign2.default)(query, {
                    lang: this._lang,
                    nintendo_authenticate: '', // eslint-disable-line camelcase
                    nintendo_authorize: '', // eslint-disable-line camelcase
                    password: password,
                    scope: '',
                    username: username
                })),
                options: {
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        Referer: authResponse.headers.location
                    },
                    hostname: location.hostname,
                    method: 'POST',
                    path: location.pathname
                },
                sendSession: false,
                updateSession: false
            }, (error, logInResponse) => {
                if (error) {
                    callbackFunction((0, _isotropicError2.default)({
                        error: error
                    }));
                    return;
                }

                if (logInResponse.statusCode !== 303 || typeof logInResponse.headers.location !== 'string') {
                    callbackFunction((0, _isotropicError2.default)({
                        details: {
                            response: logInResponse
                        },
                        message: 'Super Mario Maker log in failed.'
                    }));
                    return;
                }

                this._request({
                    options: {
                        headers: {
                            Referer: authResponse.headers.location
                        }
                    },
                    sendSession: true,
                    updateSession: true,
                    url: logInResponse.headers.location
                }, error => {
                    if (error) {
                        callbackFunction((0, _isotropicError2.default)({
                            error: error
                        }));
                        return;
                    }

                    this._isLoggedIn = true;

                    callbackFunction();
                });
            });
        });
    },

    /**
    @method module:super-mario-maker-client~SuperMarioMakerClient#logOut
    @returns {this}
    */
    logOut: function logOut() {
        this._isLoggedIn = false;
        this._session = '';
        return this;
    },

    /**
    @method module:super-mario-maker-client~SuperMarioMakerClient#unbookmarkCourse
    @arg {Object} config
    @arg {String} config.courseId
    @arg {String} config.csrfToken
    @arg {ErrorCallback} callbackFunction
    @instance
    @returns {this}
    */
    unbookmarkCourse: function unbookmarkCourse(_ref3, callbackFunction) {
        let courseId = _ref3.courseId;
        let csrfToken = _ref3.csrfToken;

        if (!this._isLoggedIn) {
            (0, _setImmediate3.default)(callbackFunction, (0, _isotropicError2.default)({
                message: 'Not logged in.'
            }));
            return this;
        }

        return this._request({
            options: {
                headers: {
                    [this._csrfTokenHeaderName]: csrfToken
                },
                method: 'DELETE'
            },
            url: this._getCourseUnbookmarkUrl(courseId)
        }, (error, response) => {
            if (error) {
                callbackFunction((0, _isotropicError2.default)({
                    error: error
                }));
            } else if (response.statusCode === 200 || response.statusCode === 302) {
                callbackFunction();
            } else {
                callbackFunction((0, _isotropicError2.default)({
                    details: {
                        response: response
                    },
                    message: 'Failed to unbookmark course.'
                }));
            }
        });
    },

    /**
    @method module:super-mario-maker-client~SuperMarioMakerClient#_getCourseBookmarkUrl
    @arg {String} courseId
    @protected
    @returns {String}
    */
    _getCourseBookmarkUrl: function _getCourseBookmarkUrl(courseId) {
        return `${ this._getCourseUrl(courseId) }/play_at_later`;
    },

    /**
    @method module:super-mario-maker-client~SuperMarioMakerClient#_getCourseUnbookmarkUrl
    @arg {String} courseId
    @protected
    @returns {String}
    */
    _getCourseUnbookmarkUrl: function _getCourseUnbookmarkUrl(courseId) {
        return `${ this._superMarioMakerBookmarkUrl }/bookmarks/${ courseId }`;
    },

    /**
    @method module:super-mario-maker-client~SuperMarioMakerClient#_getCourseUrl
    @arg {String} courseId
    @protected
    @returns {String}
    */
    _getCourseUrl: function _getCourseUrl(courseId) {
        return `${ this._superMarioMakerBookmarkUrl }/courses/${ courseId }`;
    },

    /**
    @method module:super-mario-maker-client~SuperMarioMakerClient#_init
    @arg {Object} config
    @protected
    @returns {this}
    */
    _init: function _init() {
        var _ref4 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        var _ref4$csrfTokenHeader = _ref4.csrfTokenHeaderName;
        let csrfTokenHeaderName = _ref4$csrfTokenHeader === undefined ? 'X-CSRF-Token' : _ref4$csrfTokenHeader;
        var _ref4$gameStyles = _ref4.gameStyles;
        let gameStyles = _ref4$gameStyles === undefined ? {
            sb: 'superMarioBros',
            sb3: 'superMarioBros3',
            sbu: 'newSuperMarioBrosU',
            sw: 'superMarioWorld'
        } : _ref4$gameStyles;
        var _ref4$lang = _ref4.lang;
        let lang = _ref4$lang === undefined ? 'en-US' : _ref4$lang;
        var _ref4$sessionCookieNa = _ref4.sessionCookieName;
        let sessionCookieName = _ref4$sessionCookieNa === undefined ? '_supermariomakerbookmark_session' : _ref4$sessionCookieNa;
        var _ref4$superMarioMaker = _ref4.superMarioMakerAuthUrl;
        let superMarioMakerAuthUrl = _ref4$superMarioMaker === undefined ? 'https://supermariomakerbookmark.nintendo.net/users/auth/nintendo' : _ref4$superMarioMaker;
        var _ref4$superMarioMaker2 = _ref4.superMarioMakerBookmarkUrl;
        let superMarioMakerBookmarkUrl = _ref4$superMarioMaker2 === undefined ? 'https://supermariomakerbookmark.nintendo.net' : _ref4$superMarioMaker2;

        this._csrfTokenHeaderName = csrfTokenHeaderName;
        this._gameStyles = gameStyles;
        this._isLoggedIn = false;
        this._lang = lang;
        this._requestInProgress = false;
        this._requestQueue = [];
        this._session = '';
        this._sessionCookieName = sessionCookieName;
        this._superMarioMakerAuthUrl = superMarioMakerAuthUrl;
        this._superMarioMakerBookmarkUrl = superMarioMakerBookmarkUrl;
        return this;
    },

    /**
    @method module:super-mario-maker-client~SuperMarioMakerClient#_request
    @arg {Object} config
    @arg {String} [config.body]
    @arg {Object} [config.options={}]
    @arg {Boolean} [config.sendSession]
    @arg {Boolean} [config.updateSession]
    @arg {String} [config.url]
    @arg {IncomingMessageCallback} callbackFunction
    @protected
    @returns {this}
    */
    _request: function _request(_ref5, callbackFunction) {
        let body = _ref5.body;
        var _ref5$options = _ref5.options;
        let options = _ref5$options === undefined ? {} : _ref5$options;
        let sendSession = _ref5.sendSession;
        let updateSession = _ref5.updateSession;
        let url = _ref5.url;

        if (this._requestInProgress) {
            this._requestQueue.push({
                callbackFunction: callbackFunction,
                options: options,
                url: url
            });

            return this;
        }

        this._requestInProgress = true;

        let complete;

        if (typeof sendSession === 'undefined') {
            sendSession = this._isLoggedIn;
        }

        if (typeof updateSession === 'undefined') {
            updateSession = this._isLoggedIn;
        }

        if (sendSession) {
            let headers = options.headers;

            if (!headers) {
                headers = {};
                options.headers = headers;
            }

            if (headers.Cookie) {
                if (new RegExp(`${ this._sessionCookieName }=.*?(?:;|$)`).test(headers.Cookie)) {
                    headers.Cookie = headers.Cookie.replace(new RegExp(`${ this._sessionCookieName }=.*?(;|$)`), `${ this._sessionCookieName }=${ this._session }$1`);
                } else {
                    headers.Cookie += `; ${ this._sessionCookieName }=${ this._session }`;
                }
            } else {
                headers.Cookie = `${ this._sessionCookieName }=${ this._session }`;
            }
        }

        const completeFunction = (error, response) => {
            if (complete) {
                return;
            }

            this._requestInProgress = false;
            complete = true;

            if (error) {
                callbackFunction((0, _isotropicError2.default)({
                    details: {
                        body: body,
                        options: options,
                        sendSession: sendSession,
                        updateSession: updateSession,
                        url: url
                    },
                    error: error,
                    message: 'Request error.'
                }));
            } else {
                callbackFunction(null, response);
            }

            const next = this._requestQueue.shift();

            if (next) {
                this._request(next, next.callbackFunction);
            }
        },
              request = (0, _https.request)(url ? (0, _assign2.default)((0, _url.parse)(url), options) : options, response => {
            if (!updateSession || Array.isArray(response.headers['set-cookie']) && response.headers['set-cookie'].some(cookie => {
                const match = cookie.match(new RegExp(`${ this._sessionCookieName }=(.*?);`));

                if (match) {
                    this._session = match[1];
                    return true;
                }

                return false;
            })) {
                completeFunction(null, response);
            } else {
                completeFunction((0, _isotropicError2.default)({
                    message: 'Failed to update session.'
                }));
            }
        });

        request.on('error', error => {
            completeFunction((0, _isotropicError2.default)({
                error: error
            }));
        });

        request.end(body);

        return this;
    }
}),


/**
@function fetchCourse
@arg {String} courseId
@arg {CourseCallback} callbackFunction
*/
_fetchCourse = function _fetchCourse() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
    }

    (0, _apply2.default)(_SuperMarioMakerClient.prototype.fetchCourse, _SuperMarioMakerClient(), args);
},


/**
@function logIn
@arg {Object} config
@arg {String} config.password
@arg {String} config.username
@arg {SuperMarioMakerClientCallback} callbackFunction
*/
_logIn = function _logIn(config, callbackFunction) {
    const superMarioMakerClient = _SuperMarioMakerClient().logIn(config, error => {
        if (error) {
            callbackFunction((0, _isotropicError2.default)({
                error: error
            }));
        } else {
            callbackFunction(null, superMarioMakerClient);
        }
    });
};

exports.fetchCourse = _fetchCourse;
exports.logIn = _logIn;
exports.default = _SuperMarioMakerClient;
//# sourceMappingURL=data:application/json;base64,